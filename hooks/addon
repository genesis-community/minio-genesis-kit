#!/bin/bash
set -eu

local=0
minio_url=$(exodus url)
user=$(safe get secret/$GENESIS_VAULT_PREFIX/access_token:accesskey)
pass=$(safe get secret/$GENESIS_VAULT_PREFIX/access_token:secretkey)

list() {
  echo "The following addons are defined:"
  echo
  echo "  list           List out all supported addons."
  echo "  visit          Visit the Minio page instance."
  echo "  s3             Execute 's3' commands with the appropriate envvars set."
  echo "  download-s3    Download 's3', a CLI tool for interacting with S3 APIs."
  echo
}


needs_s3() {
  if command -v ./s3 > /dev/null ; then
    local=1
  elif ! command -v s3 > /dev/null ; then
    error "#R{[ERROR]} Cannot find '#C{s3}' command -- use download-s3 addon to download it" \
          "        to somewhere in your path"
  fi
}  

download_s3() {
  [[ -z "$GENESIS_CALLER_DIR" ]] && error "#R{[ERROR]} Calling scope not found -- internal Genesis error"
  cd "$GENESIS_CALLER_DIR"

  path=""
  platform=""
  sync=""
  while [[ $# -gt 0 ]]; do
    arg="$1"; shift
    case "$arg" in
      "-p") platform="$1"; shift ;;
      "--sync")
        [[ -n "$path" ]]             && error "#R{[ERROR]} Can't specify a path and use --sync option"
        path="$(which s3 2>/dev/null)"
        sync=1
        [[ $? -gt 0 || -z "$path" ]] && error "#R{[ERROR]} No s3 found in path -- cannot use --sync option"
        [[ ! -w "$path" ]]           && error "#R{[ERROR]} No write permission to $path -- cannot use --sync option"
        ;;
      "-*")                             error "#R{[ERROR]} Invalid option $arg" ;;
      *)
        [[ -n "$sync" ]]             && error "#R{[ERROR]} Can't specify a path and use --sync option"
        [[ -n "$path" ]]             && error "#R{[ERROR]} Can't specify multiple paths"
        path="$arg"
        ;;
    esac
  done

  case "${platform:-$OSTYPE}" in 
    darwin*|mac) platform='darwin' ;;
    linux*)      platform='linux' ;;
    cygwin|win*) platform='windows' ;;
    *)
      if [[ -n "$platform" ]] ; then
        error "#R{[ERROR]} Unknown platform type '$platform': expecting one of darwin or linux"
      else 
        error "#R{[ERROR]} Cannot determine platform type: please specify one of darwin or linux" \
              "        using the -t option"
      fi
      ;;
  esac

  [[ -z "$path" ]] && path="."
  [[ -d "$path" ]] && path="$path/s3"

  url=$(curl -s "https://api.github.com/repos/jhunt/s3/releases/latest" | grep browser_download_url | grep $platform | cut -d '"' -f 4)

      echo ""
  describe "Downloading #C{$platform/amd64} version of s3 from #C{${url}}..." ""
  STATUSCODE="$(curl -o "$path" -w "%{http_code}" -Lk "$url")"
  [[ $? -gt 0 || $STATUSCODE != '200' ]] && error "#R{[ERROR]} Failed to download s3 (Status: $STATUSCODE):" "$(cat $path)"
  chmod a+x "$path"

      echo
  describe "#G{Download successful - written to} #C{$path}"
      echo
  describe "To target this Minio instance with 's3', you'll need these envvars:"
      echo
      echo "export S3_AKI=$user"
      echo "export S3_KEY=$pass"
      echo "export S3_URL=$minio_url"
      echo
  describe "You should source this binary in your PATH."
      echo
  exit 0
}

case $GENESIS_ADDON_SCRIPT in
list)
  list
  exit 0
  ;;


visit)
  if ! command -v open >/dev/null 2>&1; then
    echo "The 'visit' addon script only works on macOS, currently."
    exit 1
  fi
  echo "You will need to enter the following credentials once the page opens: "
  echo
  echo -e "  \033[1m\033[1;36m accesskey: \033[0m $user"
  echo -e "  \033[1m\033[1;36m secretkey: \033[0m $pass"
  echo
  read -n 1 -s -r -p "Press any key to open the web console..."
  open $minio_url
  exit 0
  ;;

download-s3)
  download_s3
  exit 0
  ;;

s3)
  needs_s3
  export S3_AKI=$user
  export S3_KEY=$pass
  export S3_URL=$minio_url
  export S3_USE_PATH=yes
  if [[ $(exodus self-signed) ]]; then
    export S3_INSECURE=1
  fi
  s3 "$@"
  echo
  exit 0
  ;;
    

*)
  echo "Unknown Minio Genesis Kit command. Try `list` to see what you can do."
  exit 1
  ;;

esac
